import math

class Location:
  def __init__(self,x,y):
      self.x = x
      self.y = y

  def __str__(self):
    return f'{str(self.x)},{str(self.y)}'
    
class Car():
  def __init__(self,car_name,location,cost_per_mile):
    self.car_name = car_name
    self.location = location
    self.cost_per_mile = cost_per_mile


  def __str__(self):
    return (f'{str(self.car_name)} ,[{str(self.location)}, {str(self.cost_per_mile)}]')

  def move_to(self,new_x, new_y):
    self.location.x = new_x
    self.location.y = new_y 
    # these are the updated corrindates of the car
  

class Passenger():
    def __init__(self,passenger_name,location):
      self.passenger_name = passenger_name
      self.location = location

    def __str__(self):
      return (f'{str(self.passenger_name)}, [{str(self.location)}]')

    def move_to(self,new_x, new_y):
      self.location.x = new_x
      self.location.y = new_y

    #TODO: Implement the Passenger class according to the given UML class diagram and descriptions

class RideSharingApp():
  def __init__(self):
    self.car= []
    self.passengers = []

  def add_car(self,car):
    self.car.append(car)

  def add_passengers(self,passenger):
    self.passengers.append(passenger)

  def remove_car(self,car):
    self.car.remove(car)

  def remove_passengers(self,passenger):
    self.passengers.remove(passenger)

  def find_cheapest_car(self):
    # iterare through the list of cars,
    # then find the cars with lowest cost per mile 
    # whichever car has the cheapest cost per mile is the cheapest car
    cheapest_car = self.car[0]
    for car in self.car[1:]:
        if car.cost_per_mile < cheapest_car.cost_per_mile:
            cheapest_car = car
    print(f'Cheapest car available: {cheapest_car.car_name}, Cost per mile: {cheapest_car.cost_per_mile}')
    return cheapest_car
      
      
        

  def find_nearest_car(self,passenger):
    if not self.car:
      print("No cars available.")
      return

    def distance(loc1, loc2):
      return math.sqrt((loc1.x - loc2.x) ** 2 + (loc1.y - loc2.y) ** 2)

    nearest_car = self.car[0] 
    min_distance = distance(nearest_car.location, passenger.location)

    for car in self.car:
      dist = distance(car.location, passenger.location)
      if dist < min_distance:
          min_distance = dist
          nearest_car = car

    print(f'Nearest car for {passenger.passenger_name}: {nearest_car.car_name}, Distance: {min_distance:.2f}')
    


  # (x1,y1) 
  # (x2, y2)
    
    

    #TODO: Implement the RideSharingApp class according to the given UML class diagram and descriptions


#For the remaining code (after this line), no modification is required
print('---------------------Object creation------------------')
location1 = Location(2,1)
location2 = Location(-4,1)
car1 = Car('car1', location1, 0.61)
car2 = Car('car2', location2, 0.50)
print('Car object 1 created:',car1)
print('Car object 2 created:', car2)

location3 = Location(-2,3)
location4 = Location(0,0)
passenger1 = Passenger('passenger1', location3)
passenger2 = Passenger('passenger2', location4)
print('Passenger object 1 created:', passenger1)
print('Passenger object 2 created:', passenger2)

mobileApp = RideSharingApp()
mobileApp.add_car(car1)
mobileApp.add_car(car2)
mobileApp.add_passengers(passenger1)
mobileApp.add_passengers(passenger2)

print('-----------------------Scenario 1---------------------')
mobileApp.find_cheapest_car()
mobileApp.find_cheapest_car()
mobileApp.find_nearest_car(passenger1)
mobileApp.find_nearest_car(passenger2)

print('-----------------------Scenario 2---------------------')
car1.move_to(0,-5)
passenger1.move_to(0,3)
print('car1\'s location has been updated:',car1)
print('passenger1\'s location has been updated:', passenger1)

mobileApp.find_cheapest_car()
mobileApp.find_cheapest_car()
mobileApp.find_nearest_car(passenger1)
mobileApp.find_nearest_car(passenger2)

print('-----------------------Scenario 3---------------------')
car3= Car('car3', Location(0,2), 0.3)
mobileApp.add_car(car3)
print('New car added:',car3)
mobileApp.find_cheapest_car()
mobileApp.find_cheapest_car()
mobileApp.find_nearest_car(passenger1)
mobileApp.find_nearest_car(passenger2)



